--- src/main/java/uniregistrar/openapi/model/SecretVerificationMethodInner.java	2024-04-10 00:20:30.863507540 +0200
+++ src/main/java/uniregistrar/openapi/model/SecretVerificationMethodInner.java.patched	2024-04-10 00:19:30.711289435 +0200
@@ -15,16 +15,14 @@
 
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
-import java.util.StringJoiner;
-import java.util.Objects;
-import java.util.Map;
-import java.util.HashMap;
+import java.util.*;
+
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import com.fasterxml.jackson.annotation.JsonValue;
-import java.util.Arrays;
+
 import java.util.HashMap;
 import java.util.Map;
 import uniregistrar.openapi.model.SecretVerificationMethodVerificationMethodTemplateInner;
@@ -39,9 +37,6 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
@@ -99,17 +94,17 @@
             try {
                 boolean attemptParsing = true;
                 // ensure that we respect type coercion as set on the client ObjectMapper
-                if (List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Integer.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Long.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Float.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Double.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Boolean.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(String.class)) {
+                if (List.class.equals(Integer.class) || List.class.equals(Long.class) || List.class.equals(Float.class) || List.class.equals(Double.class) || List.class.equals(Boolean.class) || List.class.equals(String.class)) {
                     attemptParsing = typeCoercion;
                     if (!attemptParsing) {
-                        attemptParsing |= ((List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Integer.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
-                        attemptParsing |= ((List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Float.class) || List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
-                        attemptParsing |= (List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
-                        attemptParsing |= (List<SecretVerificationMethodVerificationMethodTemplateInner>.class.equals(String.class) && token == JsonToken.VALUE_STRING);
+                        attemptParsing |= ((List.class.equals(Integer.class) || List.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
+                        attemptParsing |= ((List.class.equals(Float.class) || List.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
+                        attemptParsing |= (List.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
+                        attemptParsing |= (List.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                     }
                 }
                 if (attemptParsing) {
-                    deserialized = tree.traverse(jp.getCodec()).readValueAs(List<SecretVerificationMethodVerificationMethodTemplateInner>.class);
+                    deserialized = tree.traverse(jp.getCodec()).readValueAs(List.class);
                     // TODO: there is no validation against JSON schema constraints
                     // (min, max, enum, pattern...), this does not perform a strict JSON
                     // validation, which means the 'match' count may be higher than it should be.
@@ -213,7 +208,7 @@
     }
 
     static {
-        schemas.put("List<SecretVerificationMethodVerificationMethodTemplateInner>", List<SecretVerificationMethodVerificationMethodTemplateInner>.class);
+        schemas.put("List<SecretVerificationMethodVerificationMethodTemplateInner>", List.class);
         schemas.put("VerificationMethodPrivateData", VerificationMethodPrivateData.class);
         schemas.put("VerificationMethodPublicData", VerificationMethodPublicData.class);
         JSON.registerDescendants(SecretVerificationMethodInner.class, Collections.unmodifiableMap(schemas));
@@ -234,7 +229,7 @@
      */
     @Override
     public void setActualInstance(Object instance) {
-        if (JSON.isInstanceOf(List<SecretVerificationMethodVerificationMethodTemplateInner>.class, instance, new HashSet<Class<?>>())) {
+        if (JSON.isInstanceOf(List.class, instance, new HashSet<Class<?>>())) {
             super.setActualInstance(instance);
             return;
         }
@@ -270,7 +265,7 @@
      * @return The actual instance of `List<SecretVerificationMethodVerificationMethodTemplateInner>`
      * @throws ClassCastException if the instance is not `List<SecretVerificationMethodVerificationMethodTemplateInner>`
      */
-    public List<SecretVerificationMethodVerificationMethodTemplateInner> getList<SecretVerificationMethodVerificationMethodTemplateInner>() throws ClassCastException {
+    public List<SecretVerificationMethodVerificationMethodTemplateInner> getList() throws ClassCastException {
         return (List<SecretVerificationMethodVerificationMethodTemplateInner>)super.getActualInstance();
     }
 
@@ -342,11 +337,11 @@
         }
         return joiner.toString();
     }
-    if (getActualInstance() instanceof List<SecretVerificationMethodVerificationMethodTemplateInner>) {
+    if (getActualInstance() instanceof List) {
         if (getActualInstance() != null) {
           for (int i = 0; i < ((List<SecretVerificationMethodVerificationMethodTemplateInner>)getActualInstance()).size(); i++) {
             if (((List<SecretVerificationMethodVerificationMethodTemplateInner>)getActualInstance()).get(i) != null) {
-              joiner.add(((SecretVerificationMethodVerificationMethodTemplateInner)getActualInstance()).get(i).toUrlQueryString(String.format("%sone_of_2%s%s", prefix, suffix,
+              joiner.add(((List<SecretVerificationMethodVerificationMethodTemplateInner>)getActualInstance()).get(i).toUrlQueryString(String.format("%sone_of_2%s%s", prefix, suffix,
               "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
             }
           }
